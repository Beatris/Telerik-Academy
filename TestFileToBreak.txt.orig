
Stack Exchange sign up  log in  careers 2.0 


Stack Overflow
Some other changes
This should be good

git merge git-merge merge-conflict-resolution
share|improve this question
edited Aug 16 '12 at 21:20

venkat
132	
asked Oct 2 '08 at 11:31

Spoike
21.9k2478104
3	  
The following blog post seems to give a very good example on how to handle merge conflict with Git that should get you going in the right direction. Handling and Avoiding Conflicts in Git – mwilliams Oct 2 '08 at 11:40
8 Answers activeoldestvotes
up vote
691
down vote
Try: git mergetool

It opens a GUI that steps you through each conflict and you get to choose how to merge. Sometimes it requires a bit of hand editing afterwards, but usually it's enough by itself. Much better than doing the whole thing by hand certainly.

share|improve this answer
edited Jun 8 '11 at 14:23

Josh Leitzel
5,42652544	
answered Oct 2 '08 at 17:50

Peter Burns
10.8k41931
Let's see if KDIFF3 works...
up vote
604
down vote
Here's a probable use-case, from the top:

You're going to pull some changes, but oops, you're not up to date:

> git fetch origin
> git pull origin master
From ssh://gitosis@example.com:22/projectname
 * branch            master     -> FETCH_HEAD
Updating a030c3a..ee25213
error: Entry 'filename.c' not uptodate. Cannot merge.
So you get up-to-date and try again, but have a conflict:

> git add filename.c
> git commit -m "made some wild and crazy changes"
From ssh://gitosis@example.com:22/projectname
 * branch            master     -> FETCH_HEAD
Auto-merging filename.c
CONFLICT (content): Merge conflict in filename.c
Automatic merge failed; fix conflicts and then commit the result.
So you decide to take a look at the changes:

> git mergetool
Oh me, oh my, upstream changed some things, but just to use my changes.... no... their changes...

> git checkout --ours filename.c
> git checkout --theirs filename.c
> git add filename.c
> git commit -m "using theirs"
And then we try a final time

> git pull origin master
From ssh://gitosis@example.com:22/projectname
 * branch            master     -> FETCH_HEAD
Already up-to-date.
Ta-da!

share|improve this answer
edited May 17 '12 at 18:48

cambraca
5,74941545	
answered Aug 4 '10 at 17:04

CoolAJ86
8,70221835
4	  
This was super helpful because I had a lot of merge errors with binary files (art assets) and merging those seems to always fail, so I need to overwrite it with the new file always and not "merge" – petrocket Jun 8 '11 at 17:39
68	  
Thanks! 'git checkout --theirs' vs 'git checkout --ours' was exactly the information that I was looking for, and isn't mentioned in the Git book on merge resolution. – swestrup Jul 1 '11 at 21:19
1	  
+1 This is most likely what the OP was looking for. It certainly was exactly what I needed. You rock! – jlafay Jul 8 '11 at 21:31
3	  
Time for a merge!

<<<<<<<
changes made on my branch
|||||||
the common ancestor version
=======
changes made on the branch i'm merging
>>>>>>>
The middle section is what the common ancestor looked like. This is useful because you can compare it to the top and bottom versions to get a better sense of what was changed on each branch, which gives you a better idea for what the purpose of each change was.

If the conflict is only a few lines, this generally makes the conflict very obvious. (Knowing how to fix a conflict is very different; you need to be aware of what other people are working on. If you're confused, it's probably best to just call that person into your room so they can see what you're looking at.)

If the conflict is longer, then I will cut and paste each of the three sections into three separate files, such as "mine", "common" and "theirs".

Then I can run the following commands to see the two diff hunks that caused the conflict:

diff common mine
diff common theirs
This is not the same as using merge tool, since merge tool will include all of the non-conflicting diff hunks too. I find that to be distracting.

Tip Two

Somebody already mentioned this, but understanding the intention behind each diff hunk is generally very helpful for understanding where a conflict came from and how to handle it.

git log --merge -p <name of file>
This shows all of the commits that touched that file in between the common ancestor and the two heads you are merging. (So it doesn't include commits that already exist in both branches before merging.) This helps you ignore diff hunks that clearly are not a factor in your current conflict.

Tip Three

Verify your changes with automated tools.

If you have automated tests, run those. If you have a lint, run that. If it's a buildable project, then build it before you commit, etc. In all cases, you need to do a bit of testing to make sure your changes didn't break anything. (Heck, even a merge without conflicts can break working code.)

Tip Four

If you're unsure of a merge, don't force it.

Merging can feel overwhelming, especially when there are a lot of conflicting files and the conflict markers cover hundreds of lines. Often times when estimating software projects we don't include enough time for overhead items like handling a gnarly merge, so it feels like a real drag to spend several hours dissecting each conflict.

In the long run, awareness of what others are working on (such as code review) is the best tool to anticipate merge conflicts and prepare yourself to resolve them correctly in less time.

share|improve this answer
edited Mar 20 at 20:30
Let's see if this works
95
down vote
Identify which files are in conflict (Git should tell you this)
Open each file and examine the diffs; Git demarcates them. Hopefully it will be obvious which version of each block to keep. You may need to discuss it with fellow developers who committed the code
Once you've resolved the conflict in a file git add the_file
Once you've resolved all conflicts, do git rebase --continue or whatever command git said to do when you completed
share|improve this answer
answered Oct 2 '08 at 12:41

davetron5000
7,73512670
1	  
thanks for this simple answer, vey helpful. Any idea why "git add" is used in this case-- seems odd given that the file in question is already in the GIT repo. – Justin Grant Oct 10 '10 at 4:52
12	  
@Justin Think of Git as tracking content rather than tracking files. Then it's easy to see that the content you've updated isn't in the repository and needs to be added. This way of thinking also explains why Git doesn't track empty folders: Although they are technically files, there isn't any content to track. – Gareth Oct 12 '10 at 9:17
1	  
content is there, conflict occurs because there 2 version of content. Therefore "git add" does not sound correct. And it does not work (git add, git commit) if you want commit only that one file after conflict was resolved ("fatal: cannot do a partial commit during a merge.") – Dainius Sep 14 '11 at 9:19
Yes, technically, this answers the question which as asked, but is not a usable answer, in my opinion, sorry. What's the point of making one branch the same as another? Of course a merge will have conflicts.. – Thufir Aug 9 '12 at 5:56
Thanks! git add the_file was my missing link to solve a manuell merged conflict! – Calaelen Aug 31 '12 at 18:25
show 2 more comments
up vote
Blah blah blah
2	  
Using "git add" is the real trick here. You may not even want to commit (maybe you want to stash), but you have to do "git add" to complete the merge. I think mergetool does the add for you (although it isn't in the manpage), but if you do the merge manually, you need to use "git add" to complete it (even if you don't want to commit). – nobar Oct 25 '10 at 9:37
up vote
5
down vote
For Emacs users which want to resolve merge conflicts semi-manually:

git diff --name-status --diff-filter=U
shows all files which require conflict resolution. Open each of those file one by one, or all at once by:

emacs $(git diff --name-only --diff-filter=U)
When visiting a buffer requiring edits in emacs type

ALT+x vc-resolve-conflicts
This will open 3 buffers (mine, theirs, and the output buffer). Navigate by pressing 'n' (next region), 'p' (prevision region). Press 'a' and 'b' to copy mine or theirs region to output buffer, respectively. And/or edit the output buffer directly. When finished: Press 'q', emacs asks you if you want to save this buffer: yes. After finishing a buffer mark it as resolved by running from the teriminal:

git add FILENAME
When finished with all buffers type

git commit
to finish the merge.

share|improve this answer
answered Feb 22 at 23:04

eci
40137
up vote
0
down vote
You could fix merge conflicts in a number of ways as other have detailed.

I think the real key is understanding how changes flow with local and remote repositories. The key to this is understading tracking branches. I have found that I think of the tracking branch as the 'missing piece in the middle' between me my local, atual files directory and the remote defined as origin.

I've personally got into the habit of 2 things to help avoid this.

Instead of:

git add .
git commit -m"some msg"
Which has two drawbacks - 1) All files get added and that might include some not needed and 2) You don't get to review the file list first, instead I do:

git add file,file2,file3...
git commit # Then type the files in the editor and save-quit.
This way you are more deliberate about which files get added and you also get to review the list and think a bit more while using the editor for the message. I find it also improves my commit messages when I use a full screen editor.

Also (and more relevant to your situation), I try to avoid:

git pull
or

git pull origin master.
because pull implies a merge and if you have changes locally that you didn't want merged you can easily end up with merge conflicts that you then have to spend time resolving.

Instead I try to do

git checkout master
git fetch   
git reset --hard origin/master # or whatever branch I want.
You may also find this helpful:

git branch, fork, fetch, merge, rebase and clone, what are the differences?

share|improve this answer
answered Apr 19 at 1:08

Michael Durrant
18.8k94293
protected by Will? Dec 17 '10 at 13:56
This question is protected to prevent "thanks!", "me too!", or spam answers by new users. To answer it, you must have earned at least 10 reputation on this site.

Not the answer you're looking for? Browse other questions tagged git merge git-merge merge-conflict-resolution or ask your own question.
tagged
git × 26403
merge × 4237
git-merge × 397
merge-conflict-resolution × 86
asked
4 years ago
viewed
477887 times
active
6 days ago
Linked
251Aborting a merge in Git
185git branch, fork, fetch, merge, rebase and clone, what are the differences?
103Git on Windows: How do you set up a mergetool?
9git: branches diverged; how to proceed?
9Merge conflict resolution
5How do I fix a merge conflict due to removal of a file in a branch?
10Git: currently in merge/conflict with private remote repo. How to tell Git to just use my local files?
5How do I go about solving this git conflict?
9Git - automatically create distinct files for versions on conflict
3Git stash pop- needs merge, unable to refresh index
see more linked questions…
Related
2720How do I edit an incorrect commit message in Git?
1479What's the difference between 'git pull' and 'git fetch'?
298How do you merge selective files with git-merge?
2345How to undo the last Git commit?
5How do I fix a merge conflict due to removal of a file in a branch?
416Undo a Git merge?
1Why does git sometimes mark added lines as changed lines (i.e. an empty conflict over an added piece of code)
5`git stash` during a merge conflict
0Merge two reformatted PHP files with GIT
0git workflow: merging and fixing conflicts once
question feed
about faq badges blog chat data legal privacy policy jobs advertising info mobile contact us feedback
TECHNOLOGY	 LIFE / ARTS	 CULTURE / RECREATION	 SCIENCE	 OTHER
Stack Overflow
Server Fault
Super User
Web Applications
Ask Ubuntu
Webmasters
Game Development
TeX - LaTeX
Programmers
Unix & Linux
Tuk ima change
Mathematica
more (14)
Photography
Science Fiction & Fantasy
Seasoned Advice (cooking)
Home Improvement
more (13)
English Language & Usage
Skeptics
Mi Yodeya (Judaism)
Travel
Arqade (gaming)
Bicycles
Role-playing Games
more (22)
Mathematics
Cross Validated (stats)
Theoretical Computer Science
Physics
more (7)
Stack Apps
Meta Stack Overflow
Area 51
Stack Overflow Careers
site design / logo © 2013 stack exchange inc; user contributions licensed under cc-wiki with attribution required
rev 2013.4.25.666